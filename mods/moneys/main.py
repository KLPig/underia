# Underia Mod Setup
# Auto generated by src.mods.setup.underia_mod_setup()
# Copyright klpig 2024, all rights not reserved.

from src import underia, mods

# Basic datas
MOD_NAME = 'Money\'s Mod'
MOD_VERSION = (0, 0, 1)
MOD_AUTHOR = 'Klpig'
MOD_DESCRIPTION = 'Everything can be solved by money.'

# Mod Contents
ITEMS: dict[str, underia.Inventory.Item] = {
	'copper_coin': underia.Inventory.Item('Copper Coin', '', 'copper_coin', 1,
                                          [underia.TAGS['item']]),
    'iron_coin': underia.Inventory.Item('Iron Coin', '', 'iron_coin', 3,
                                          [underia.TAGS['item']]),
    'gold_coin': underia.Inventory.Item('Gold Coin', '', 'gold_coin', 5,
                                          [underia.TAGS['item']]),
    'platinum_coin': underia.Inventory.Item('Platinum Coin', '', 'platinum_coin', 10,
                                          [underia.TAGS['item']]),
    'mithrill_coin': underia.Inventory.Item('Mithrill Coin', '', 'Mithrill Coin', 100,
                                          [underia.TAGS['item']]),
    'chaos_coin': underia.Inventory.Item('Chaos Coin', '', 'Chaos Coin', 1000,
                                          [underia.TAGS['item']]),
    'determined_coin': underia.Inventory.Item('Determined Coin', '', 'Determined Coin', 10000,
                                          [underia.TAGS['item']]),
}
RECIPES: list[underia.Recipe] = [
	
]
r = [i for i in ITEMS.values()]
for i, rr in enumerate(r):
    setattr(rr, 'value', 10 ** (i + 1))
WEAPONS: dict[str, underia.Weapon] = {
	
}
PROJECTILE_TYPE = type(underia.Projectiles.Projectile)
PROJECTILES: dict[str, PROJECTILE_TYPE] = {
	
}
ENTITY_TYPE = type(underia.Entities.Entity)
ENTITIES: dict[str, ENTITY_TYPE] = {
	
}

# SETUP_FUNC
coins = ['copper_coin', 'iron_coin', 'gold_coin', 'platinum_coin','mithrill_coin', 'chaos_coin', 'determined_coin']
for i in range(len(coins)):
    underia.ITEMS[coins[i]].value = 10 ** (i + 1)
for item in underia.ITEMS.values():
    try:
        getattr(item, 'value')
    except AttributeError:
        setattr(item, 'value', -1)
for recipe in underia.RECIPES:
    if recipe.result.endswith('_coin'):
        continue
    if len(underia.ITEMS[recipe.result].tags) <= 1:
        underia.RECIPES.remove(recipe)
        del recipe
        continue
    v = 0
    for it, qt in recipe.material.items():
        try:
            getattr(underia.ITEMS[it], 'value')
        except AttributeError:
            setattr(underia.ITEMS[it], 'value', -1)
        if getattr(underia.ITEMS[it], 'value') == -1:
            setattr(underia.ITEMS[it], 'value', int((underia.ITEMS[it].rarity + 1) ** 1.2 * 200))
        v += getattr(underia.ITEMS[it], 'value') * qt
    recipe.material.clear()
    cv = v
    for rc in range(6, 0, -1):
        mt = 10 ** (rc + 1)
        qt = cv // mt
        if qt:
            recipe.material[coins[rc]] = qt
        cv %= mt
    v //= recipe.crafted_amount
    vx = getattr(underia.ITEMS[recipe.result], 'value')
    if v > vx:
        setattr(underia.ITEMS[recipe.result], 'value', v)
for i in underia.ITEMS.values():
    if i.value == -1:
        setattr(i, 'value', int((i.rarity ** 1.2 + 1) * 200))
for e in dir(underia.Entities):
    ee = getattr(underia.Entities, e)
    try:
        ee.LOOT_TABLE
    except AttributeError:
        continue
    lt: underia.LootTable = ee.LOOT_TABLE
    mn, mx = 0, 0
    for tbs in lt.loot_list:
        if type(tbs) is underia.SelectionLoot:
            cmn, cmx = 0, 0
            for it, mna, mxa in tbs.items:
                try:
                    cmn += getattr(underia.ITEMS[it], 'value') * mna
                    cmx += getattr(underia.ITEMS[it], 'value') * mxa
                except AttributeError:
                    setattr(underia.ITEMS[it], 'value', -1)
            cmn = cmn * tbs.selection_min // len(tbs.items)
            cmx = cmx * tbs.selection_max // len(tbs.items)
            mn += cmn
            mx += cmx
        else:
            try:
                mn += getattr(underia.ITEMS[tbs.item], 'value') * tbs.amount_min
                mx += getattr(underia.ITEMS[tbs.item], 'value') * tbs.amount_max
            except AttributeError:
                setattr(underia.ITEMS[tbs.item], 'value', -1)
    st = False
    for i in range(6, 0, -1):
        mt = 10 ** (i + 1)
        if mn // mt:
            st = True
            ee.LOOT_TABLE = underia.LootTable([underia.IndividualLoot(coins[i], 1, mn // mt, mx // mt)])
            break
    if not st:
        ee.LOOT_TABLE = underia.LootTable([underia.IndividualLoot(coins[0], 1, 0, mx // 100)])
for i in underia.ITEMS.values():
    if getattr(i, 'value') != -1:
        i.desc += f'\n${getattr(i, "value")}'

# SETUP_FUNC
'''
# UPDATE_FUNC
for it, qt in underia.get_game().player.inventory.items.items():
    v = 0
    if it.endswith('_coin'):
        v += qt * getattr(underia.ITEMS[it], 'value')
        underia.get_game().player.inventory.remove_item(underia.ITEMS[it], qt)
    for rc in range(6, 0, -1):
        mt = 10 ** (rc + 1)
        qt = v // mt
        if qt:
            underia.get_game().player.inventory.add_item(underia.ITEMS[coins[rc]], qt)
        v %= mt
# Code here (import allowed)
# UPDATE_FUNC
'''
mods.wrap()