import underia3
import underia
import random

FIRST_ADJECTIVES = [
    "adorable",
    "adventurous",
    "aggressive",
    "alert",
    "ambitious",
    "amiable",
    "amusing",
    "angry",
    "annoying",
    "anxious",
    "arrogant",
    "ashamed",
    "attractive",
    "average",
    "awful",
    "bad",
    "beautiful",
    "bewildered",
    "bitchy",
    "bitter",
    "bizarre",
    "black",
    "bloody",
    "blue",
    "blue-eyed",
    "blushing",
    "boiling",
    "bold",
    "bored",
    "brainy",
    "brave",
    "breakable",
    "bright",
    "brilliant",
    "brisk",
    "broken",
    "brown",
    "bumpy",
    "burly",
    "busy",
    "calm",
    "careful",
    "cautious",
    "charming",
    "cheerful",
    "chilly",
    "chubby",
    "clean",
    "clear",
    "clever",
    "cloudy",
    "clumsy",
    "colorful",
    "colossal",
    "combative",
    "comfortable",
    "concerned",
    "condemned",
    "confused",
    "cooperative",
    "courageous",
    "crazy",
    "creepy",
    "crooked",
    "crowded",
    "cruel",
    "curious",
    "cute",
    "dangerous",
    "dark",
    "dead",
    "defeated",
    "defiant",
    "delicious",
    "depressed",
    "determined",
    "different",
    "difficult",
    "disgusted",
    "distinct",
    "disturbed",
    "dizzy",
    "doubtful",
    "drab",
    "dull",
    "eager",
    "easy",
    "elated",
    "elegant",
    "embarrassed",
    "enchanting",
    "encouraging",
    "energetic",
    "enthusiastic",
    "envious",
    "evil",
    "excited",
    "expensive",
    "exuberant",
    "fair",
    "faithful",
    "famous",
    "fancy",
    "fantastic",
    "fierce",
    "filthy",
    "fine",
    "flaky",
    "flamboyant",
    "flashy",
    "flawless",
    "flat",
    "fluffy",
    "fluttering",
    "foolish",
    "frail",
    "frantic",
    "friendly",
    "frightened",
    "funny",
    "fuzzy",
    "gentle",
    "gifted",
    "gloomy",
    "glorious",
    "good",
    "gorgeous",
    "graceful",
    "greasy",
    "grieving",
    "grotesque",
    "grumpy",
    "handsome",
    "happy",
    "hard",
    "hateful",
    "healthy",
    "helpful",
    "helpless",
    "high",
    "hilarious",
    "hissing",
    "historical",
    "hollow",
    "homeless",
    "homely",
    "horrible",
    "hot",
    "huge",
    "humble",
    "humiliating",
    "hungry",
    "hurt",
    "ill",
    "important",
    "impossible",
    "inexpensive",
    "innocent",
    "inquisitive",
    "itchy",
    "jealous",
    "jittery",
    "jolly",
    "joyous",
    "juicy",
    "jumpy",
    "kind",
    "lazy",
    "light",
    "lively",
    "livid",
    "lonely",
    "long",
    "lovely",
    "lucky",
    "magnificent",
    "misty",
    "modern",
    "motionless",
    "muddy",
    "mushy",
    "mysterious",
    "nasty",
    "naughty",
    "nervous",
    "nice",
    "noisy",
    "nutty",
    "obedient",
    "obnoxious",
    "odd",
    "old",
    "open",
    "outrageous",
    "panicky",
    "perfect",
    "plain",
    "pleasant",
    "poised",
    "poor",
    "powerful",
    "precious",
    "prickly",
    "proud",
    "puzzled",
    "quaint",
    "real",
    "relieved",
    "repulsive",
    "rich",
    "scary",
    "selfish",
    "shiny",
    "shy",
    "silly",
    "sleepy",
    "tender",
    "tense",
    "terrible",
    "testy",
    "thankful",
    "thoughtful",
    "thoughtless",
    "tired",
    "tough",
    "troubled",
    "ugly",
    "uninterested",
    "unsightly",
    "upset",
    "uptight",
    "vast",
    "victorious",
    "vivacious",
    "wandering",
    "weary",
    "wicked",
    "wide-eyed",
    "wild",
    "witty",
    "worried",
    "wrong",
    "zany",
    "zealous",
    "zombie"
]

GAME_ELEMENTS = [
    it.name for it in underia.ITEMS.values()
] + [
    getattr(underia.Entities, d).NAME for d in dir(underia.Entities) if 'NAME' in dir(getattr(underia.Entities, d))
] + [
    getattr(underia3, d).NAME for d in dir(underia3) if 'NAME' in dir(getattr(underia3, d))
]

WORLD_NOUNS = [
    'aisle',
    'alley',
    'ambush',
    'ancient ruins',
    'arcade',
    'arena',
    'armory',
    'armoury',
    'army',
    'ashen',
    'assembly',
    'assembly hall',
    'assembly room',
    'assembly wing',
    'atrium',
    'autumn',
    'barracks',
    'barricade',
    'bastion',
    'bayou',
    'beach',
    'beacon',
    'bedroom',
    'belfry',
    'bend',
    'berry',
    'bier',
    'bistro',
    'blacksmith',
    'bog',
    'boneyard',
    'bookcase',
    'bookshop',
    'bordello',
    'booth',
    'boudoir',
    'bowl',
    'box',
    'bramble',
    'branch',
    'brazier',
    'breach',
    'bridge',
    'brothel',
    'brow',
    'canyon',
    'cave',
    'cellar',
    'chamber',
    'chapel',
    'chasm',
    'chest',
    'circle',
    'circus',
    'cloister',
    'closet',
    'cloth',
    'coast',
    'cobble',
    'coffin',
    'coil',
    'coral',
    'corridor',
    'courtyard',
    'dale',
    'dungeon',
    'dungeon room',
    'dungeon wing',
    'dusk',
    'dwelling',
    'echo',
    'elbow',
    'encampment',
    'entrance',
    'escalator',
    'estuary',
    'excavation',
    'expanse',
    'falls',
    'fane',
    'farm',
    'fashion show',
    'gate',
    'gazebo',
    'home',
    'hollow',
    'honeycomb',
    'horseshoe',
    'hospital',
    'hotel',
    'ice',
    'igloo',
    'island',
    'jail',
    'keep',
    'kiln',
    'kiosk',
    'knoll',
    'knot',
    'lagoon',
    'lair',
    'lake',
    'lava',
    'library',
    'lighthouse',
    'lock',
    'loft',
    'loincloth',
    'lone wolf',
    'lumberyard',
   'mansion',
   'manor',
   'marsh',
   'mausoleum',
   'maw',
   'mire',
   'moat',
   'mold',
   'monastery',
   'museum',
    'nest',
    'nesting ground',
    'orchard',
    'overlook',
    'overpass',
    'palace',
    'pantry',
    'pavilion',
    'pen',
    'peninsula',
    'penitentiary',
    'pond',
    'pool',
    'port',
    'prairie',
    'quarry',
    'racecourse',
    'rafter',
    'ranch',
    'rattan',
    'ravine',
    'recess',
    'ridge',
    'road',
    'ruin',
    'ruined city',
    'ruined house',
    'ruined manor',
    'ruined temple',
    'ruins',
   'sandbar',
   'sands',
   'savannah',
   'sawmill',
   'scar',
   'scarp',
   'shelter',
   'shoal',
   'shrine',
   'shrub',
   'shrubbery',
   'shuttle',
   'skyline',
   'slate',
   'slough',
   'smelter',
   'smokestack',
   'snowfield',
   'spire',
   'spring',
   'spur',
   'staircase',
   'star',
   'station',
   'strait',
   'summit',
   'sunset',
   'swamp',
   'swampland',
   'synagogue',
    'temple',
    'thicket',
    'throne',
    'tower',
    'tree',
    'trench',
    'tundra',
    'undergrowth',
    'valley',
    'villa',
    'village',
    'vineyard',
    'wall',
    'waste',
    'waterfall',
    'well',
    'wheat',
    'windmill',
    'windy',
    'wolf',
    'wood',
    'yard',
    'zebra'
]

def get_name(seed: int):
    random.seed(seed)
    adjective_no = random.choices([1, 2, 3], [30, 7, 2])[0]
    element_no = random.choices([1, 2, 3], [50, 6, 1])[0]
    noun_no = random.choices([1, 2, 3, 4], [60, 8, 7, 1])[0]
    return ' '.join([d.capitalize() for d in random.choices(FIRST_ADJECTIVES, k=adjective_no)]) + \
        (', ' if not random.randint(0, 2) else ' ') + \
        (' & ' if random.randint(0, 2) else ', ').join([d.capitalize() for d in random.choices(GAME_ELEMENTS, k=element_no)]) + ' ' + \
        (' with ' if random.randint(0, 3) else ' in ').join([d.capitalize() for d in random.choices(WORLD_NOUNS, k=noun_no)])

if __name__ == '__main__':
    print(get_name(12345))